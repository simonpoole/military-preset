/*
 */
 
buildscript {
    repositories {
        maven {
            url "https://plugins.gradle.org/m2/"
        }
    }
    dependencies {
        classpath "com.github.breadmoirai:github-release:2.5.2"
    }
}

plugins {
    id "de.undercouch.download" version "4.1.2"
}

apply plugin: 'java'
apply plugin: "com.github.breadmoirai.github-release"

repositories {
	mavenCentral()
	mavenLocal()
}

import de.undercouch.gradle.tasks.download.Download

ext {
    version = '1.2.0'
	preset_file = 'master_preset.xml'
	josm_preset_file = 'josm_preset.xml'
	vespucci_preset_file = 'vespucci_preset.xml'
	vespucci_preset_version = '1.17'
	temp = 'build/temp/'
	tempDir = file(temp)
	github_token = System.getenv('GITHUB_TOKEN')
}

configurations {
    resoveableRuntimeOnly.extendsFrom runtimeOnly {
        canBeResolved = true
    }
}

dependencies {
    resoveableRuntimeOnly 'ch.poole:preset-utils:0.40.0'
}

defaultTasks 'generateAllPresetTypes'

task copyCss(type: Copy) {
	from zipTree(project.configurations.resoveableRuntimeOnly.filter{it.name.startsWith('preset-utils')}.singleFile)
    include "preset.css"
    into new File(projectDir.getPath() + '/website')
}

task copyResources(type: Copy) {
    from zipTree(project.configurations.resoveableRuntimeOnly.filter{it.name.startsWith('preset-utils')}.singleFile)
    include "josm-preset-1.0.xlmns"
    include "vespucci-preset-${vespucci_preset_version}.xlmns"
    include "toJOSM.xslt"
    include "href2wiki.xslt"
    include "wiki2href.xslt"
    into new File(buildDir.getPath() + '/xml')
}

task updateWebsite(dependsOn: ["copyCss"], type: JavaExec) {
    main = "ch.poole.osm.presetutils.Preset2Html"
    classpath = configurations.resoveableRuntimeOnly
    args('-input',    preset_file,
    	 '-output',   'index.html',
    	 '-vespucci', 'https://github.com/simonpoole/' + project.name + '/releases/latest/download/military.zip',
         '-josm',     'https://github.com/simonpoole/' + project.name + '/releases/latest/download/military-josm.zip')
}
updateWebsite.group = 'preset utils'
updateWebsite.description = 'Update the website'

task updatePot(type: JavaExec) {
    main = "ch.poole.osm.presetutils.Preset2Pot"
    classpath = configurations.resoveableRuntimeOnly
    args('-input',  preset_file,
    	 '-output', 'i18n/preset.pot')
}
updatePot.group = 'preset utils'
updatePot.description = 'Update the translation template'

task updateTranslations(type: Exec) {
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    	commandLine 'cmd', '/c', 'tx.exe', 'pull', '-a'
	} else {
    	commandLine 'tx', 'pull', '-a'
	}
}
updateTranslations.group = 'transifex'
updateTranslations.description = 'Update translations by executing the transifex tx utility'

task copyTranslations(dependsOn: ['updateTranslations'], type: Copy) {
    from 'i18n'
    into "$buildDir/temp/i18n/data"
    rename 'preset_(.*).po', '$1.po'
    rename { filename -> filename.replace '-r', '_' }
    include "*.po"
    include "*.pot"
}

task downloadLangScript(type: Download) {
    acceptAnyCertificate true
    src 'https://josm.openstreetmap.de/export/HEAD/osm/applications/editors/josm/i18n/i18n.pl'
    dest temp + 'i18n.pl'
}

task patchLangScript(dependsOn: ['downloadLangScript']) {
    doLast {
        ant.replace(token:"/\\/", value:"/") {
            fileset(dir: 'build/temp', includes: 'i18n.pl')
        }
    }
}

// generate JOSM .lang files
task generateLang(dependsOn: ['patchLangScript'], type: Exec) {
    workingDir temp + 'i18n/data'
    commandLine 'perl', '../../i18n.pl', '--basedir=.', '--potfile=preset.pot', '*.po'
}

// tasks to generate a zipped preset for JOSM
task josmIcons(type: Copy) {
  from projectDir
  include preset_file
  into 'build/temp'
  filteringCharset = 'UTF-8'
  rename preset_file, josm_preset_file
  expand([
    ICONPATH: '',
    ICONTYPE: 'png'
  ])
}

task transformToJosm(dependsOn: ["josmIcons","copyResources"], type: Exec) {
	def output = 'build/gen/' + josm_preset_file
	mkdir('build/gen')
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
		// remove extensions
    	commandLine 'cmd', '/c', 'xmlstarlet', 'tr', 'build/xml/toJOSM.xslt', 'build/temp/' + josm_preset_file 
	} else {
		// remove extensions
    	commandLine 'xmlstarlet', 'tr', 'build/xml/toJOSM.xslt', 'build/temp/' + josm_preset_file
	}	
	doFirst {
		standardOutput = new FileOutputStream(new File(projectDir, output))
	}
}

task generateAndValidateJosm(dependsOn: ["transformToJosm"], type: Exec) {
	def input = 'build/gen/' + josm_preset_file
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    	// validation
    	commandLine 'cmd', '/c', 'xmlstarlet', 'val', '-s', 'build/xml/josm-preset-1.0.xlmns', '-e', input
	} else {
    	// validation
    	commandLine 'xmlstarlet', 'val', '-s', 'build/xml/josm-preset-1.0.xlmns', '-e', input
	}	
}

task josmZip(dependsOn: ["vespucciIcons", "generateAndValidateJosm", "copyTranslations", "generateLang"], type: Zip) {
    archiveBaseName = 'military-josm'
    version ''
    destinationDirectory = new File(buildDir, 'gen')
    from ('icons/png')
    from ('build/gen/' + josm_preset_file)
    from (tempDir.getPath() + "/" + 'i18n')
    exclude ('data/*.pot', 'data/*.po')
}
josmZip.group = 'preset'
josmZip.description = 'Generate zipped preset file for JOSM'

// tasks to generate a zipped preset for vespucci
task vespucciIcons(type: Copy) {
  from projectDir
  include preset_file
  into 'build/gen'
  filteringCharset = 'UTF-8'
  rename (preset_file, vespucci_preset_file)
  expand([
    ICONPATH: '',
    ICONTYPE: 'png'
  ])
}

task generateAndValidateVespucci(dependsOn: ["vespucciIcons","copyResources"], type: Exec) {
	def input = 'build/gen/' + vespucci_preset_file
	mkdir('build/gen')
	if (System.getProperty('os.name').toLowerCase(Locale.ROOT).contains('windows')) {
    	// validation
    	commandLine 'cmd', '/c', 'xmlstarlet', 'val', '-s', "build/xml/vespucci-preset-${vespucci_preset_version}.xlmns", '-e', input
	} else {
    	// validation
    	commandLine 'xmlstarlet', 'val', '-s', "build/xml/vespucci-preset-${vespucci_preset_version}.xlmns", '-e', input
	}	
}

task vespucciZip(dependsOn: ["generateAndValidateVespucci", "updateTranslations"], type: Zip) {
    archiveBaseName = 'military'
    version ''
    destinationDirectory = new File(buildDir, 'gen')
    from ('icons/png')
    from ('build/gen/' + vespucci_preset_file)
    from ('i18n')
    exclude ('*.pot')
}
vespucciZip.group = 'preset'
vespucciZip.description = 'Generate zipped preset file for vespucci'

task recolour {
    group "Icons"
    description "recolour svg icons"

    doLast {
        logger.info("Recolouring icons")
        copy {
            from "$projectDir/icons/svg"
            into 'build/icons/recoloured'
            filteringCharset = 'UTF-8'
            rename '(.*)', 'military' +'_$0'  
            String c1 = '#556B2F';
            String c2 = '#556B2F';
            String c3 = '#ffffff';
            filter {
                String line -> 
                    line = line.replaceAll('(?i)fill:#111111', 'fill:' + c1)
                    line = line.replaceAll('(?i)fill:#111;', 'fill:' + c1 + ';')
                    line = line.replaceAll('(?i)stroke:#eeeeee', 'stroke:' + c2)
                    line = line.replaceAll('(?i)stroke:#eee;', 'stroke:' + c2 + ';')
                    line = line.replaceAll('(?i)fill:white', 'fill:' + c3)
                    line = line.replaceAll('(?i)stroke:white', 'stroke:' + c3)
                    line = line.replaceAll('(?i)fill:#ffffff', 'fill:' + c3)
                    line = line.replaceAll('(?i)stroke:#ffffff', 'stroke:' + c3)
                    line = line.replaceAll('(?i)fill=\"#111111\"', 'fill=\"' + c1 + '\"')
                    line = line.replaceAll('(?i)fill=\"#111\"', 'fill=\"' + c1 + ' \"')
                    line = line.replaceAll('(?i)stroke=\"#eeeeee\"', 'stroke=\"' + c2 + '\"')
                    line = line.replaceAll('(?i)stroke=\"#eee\"', 'stroke=\"' + c2 + '\"')
                    line = line.replaceAll('(?i)fill=\"white\"', 'fill=\"' + c3 + '\"')
                    line = line.replaceAll('(?i)stroke=\"white\"', 'stroke=\"' + c3 + '\"')
                    line = line.replaceAll('(?i)fill=\"#ffffff\"', 'fill=\"' + c3 + '\"')
                    line = line.replaceAll('(?i)stroke=\"#ffffff\"', 'stroke=\"' + c3 + '\"')
            }
        }
    }
}
    
task generatePngs (dependsOn: ["recolour"]) {
    group "Icons"
    description "generate PNGs from, potentially recoloured, SVG files"
    
    doLast {
        String[] svgDirs = ["build/icons/recoloured/"]
        svgDirs.each { svgDir ->
            logger.info("Creating PNGs for icons in $svgDir")
            def size = svgDir.contains("roof") ? 56 : 48 // hack alert          
            fileTree(dir: svgDir).each { svg ->
                String fileName = svg.getName().replace('.svg','.png');
                exec {
                    commandLine 'rsvg-convert', '-a', '-f', 'png', '-h', size, '-o', 'icons/png/' + fileName, svg
                }
            }
        }
    }
}

githubRelease {
    token project.ext.github_token == null ? "" : project.ext.github_token    
    owner = "simonpoole"
    tagName = project.ext.version
    releaseName = project.ext.version
    targetCommitish = "gh-pages"
    owner = "simonpoole"
    generateReleaseNotes = true
    dryRun = false
    body = '''\
## Files
    
### Vespucci
_military.zip_ - preset for Vespucci with icons 

### JOSM
_military_josm.zip_ - preset for JOSM using icons from this project and translations

'''
    releaseAssets = new File(buildDir, 'gen').listFiles()
    overwrite = true
}

// generate everything
build {
	dependsOn "vespucciZip" 
	dependsOn "josmZip"
	dependsOn "updatePot"
	dependsOn "updateWebsite"
} 

